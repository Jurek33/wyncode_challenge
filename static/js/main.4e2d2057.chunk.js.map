{"version":3,"sources":["components/button.component.jsx","components/repository.component.jsx","components/repositories.component.jsx","components/error.boundary.component.jsx","components/greeting.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","message","onClick","className","Repository","item","name","html_url","href","target","rel","Repositories","items","map","key","id","ErrorBoundary","Greeting","useState","success","isPending","info","prevState","setState","getData","url","a","fetch","response","json","data","console","log","useEffect","login","public_repos","App","repositories","isFetchSuccess","isFetchFailed","handleSubmit","repos","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4e2d2057.chunk.js","sourcesContent":["import React from 'react';\nimport './button.style.css';\n\nconst Button = ({message , onClick}) => {\n   return (\n      <button className='button' onClick={onClick}>{message}</button>\n   )\n}\n\nexport default Button;","import React from 'react';\nimport './repository.style.css';\n\nconst Repository = ({item}) => {\n   const { name, html_url } = item;\n   return (\n      <div className='repository'>\n         <div className='name'>\n            <span className='detail'>{name}</span>\n         </div>\n         <div className='url'>\n            <a \n               className ='link' \n               href={html_url}\n               target=\"_blank\"\n               rel='noopener noreferrer'\n               ><span className='detail'>{html_url}</span></a>\n         </div>\n      </div>\n   )\n}\n\nexport default Repository;\n\n// display: grid;\n//     grid-template-columns: repeat(2,auto);\n//     grid-template-rows: repeat(5,auto);\n//     grid-gap: 5%;","import React from 'react';\nimport Repository from './repository.component';\nimport './repositories.style.css';\n\nconst Repositories = ({items}) => {\n   return (\n      <div className=\"repositories-container\">\n         {items.map(item => <Repository key={item.id} item={item}/>)}\n      </div>\n   )\n}\n\nexport default Repositories;","import React from 'react';\nimport './error.boundary.style.css';\n\nconst ErrorBoundary = () => {\n   return(\n      <div className='error-boundary'>\n         <h3 className='header'>Error fetching data :(</h3>\n         <div className='header'>This may happen because of poor internet connection. Try one of the following:</div>\n         <ol className='error-list'>\n            <li>Refresh the page</li>\n            <li>Connect to other network</li>\n            <li>Check firewall</li>\n         </ol>\n      </div>\n   )\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport './greeting.style.css';\n\nconst Greeting = () => {\n   const [prevState, setState] = useState({\n      success: false, \n      isPending: false, \n      info: ''\n   })\n   const giturl = 'https://api.github.com/users/Jurek33';\n   const getData = async (url) => {\n      setState({isPending: true});\n      try {\n         const response = await fetch(url);\n         const data = await response.json();\n         if(data) setState({\n            success: true, \n            isPending: false, \n            info:data\n         })\n      } catch(error) {\n         console.log(error);\n         setState({isPending: false})\n      }\n   }\n   useEffect(() => {\n      getData(giturl);\n   },[])\n\n   return (\n      <div>\n         <h2 className='header'>Welcome to Wyncode coding challange page</h2>\n         {\n            prevState.isPending ?\n            <span className='loading'>loading... please wait</span> \n            :  prevState.success ?       \n               <div className='container'>\n                     <p>Here are some facts about me:</p>\n                     <ul className='list'>\n                        <li className='item'>My name is Yury but I choosed {prevState.info.login} nickname</li>\n                        <li className='item'>I currently have {prevState.info.public_repos} repositories on GitHub</li>\n                        <li className='item'>To see my best ones (I hope they are not that bad) click on a button below and wait for the response</li>\n                        <li className='item'>\n                           To see all of them go straight to  \n                           <a href={prevState.info.html_url}\n                              target=\"_blank\"\n                              rel='noopener noreferrer'\n                              className='link'\n                              > {prevState.info.html_url}\n                           </a>\n                        </li>\n                        <li className='item'>I appreciate you visiting this page :)</li>\n                     </ul>\n               </div>\n               : null\n         }\n      </div>\n\n   )\n}\n\nexport default Greeting;","import React, { useState } from 'react';\nimport './App.css';\nimport Button from './components/button.component';\nimport Repositories from './components/repositories.component';\nimport ErrorBoundary from './components/error.boundary.component';\nimport Greeting from './components/greeting.component';\n\nconst App = () => {\n\n  const [prevState, setState] = useState({\n    repositories: [],\n    isFetchSuccess: false,\n    isPending: false,\n    isFetchFailed: false\n  });\n\n  const handleSubmit = async () => {\n    setState({isPending: true})\n    try {\n      const giturl = 'https://api.github.com/users/Jurek33/repos?';\n      const response = await fetch(giturl);\n      const data = await response.json();\n      const repos = data.filter(item => \n        item.name==='clothing_shop' ||\n        item.name==='Face_Recognition' || \n        item.name==='Robo_Friends' || \n        item.name==='Hackerrank_Solutions' || \n        item.name==='health_assistant'\n      );\n      if(repos) setState({\n        isFetchSuccess: true, \n        isPending: false, \n        repositories: repos\n      });\n    } \n    catch(error) {\n      console.log(error.message); \n      setState({\n        isFetchFailed: true, \n        isPending: false\n      })\n    }\n    \n  }\n  return (\n    <div className=\"App\">\n      <Greeting />\n      <Button message={'See repositories preview'} onClick={() => handleSubmit()} />\n      <div className='repositories-info'>\n        {\n          prevState.isPending? <div className='loading'>loading... Just a few moments</div> : \n          prevState.isFetchSuccess ? <Repositories items={prevState.repositories} /> :\n          prevState.isFetchFailed ? <ErrorBoundary />:\n          null\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}